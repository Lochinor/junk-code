plugins {
    id "com.android.application"
    id "cn.foxette.plugin.gradle.junk-code"
}

android {
    compileSdkVersion 34
    namespace 'com.example.android'

    defaultConfig {
        applicationId "com.example.android"
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }
}

dependencies {
    // 如果生成后移除了插件或者 autoUsage 设置成了 false 可手动添加以下代码
    // releaseRuntimeOnly fileTree(dir : "junk", include : ["*.aar"])
}

androidJunkCode {
    // 必填：activity的总数，最多 3600
    activityClassesCount.set(30)

    // -- 以下参数可选 --

    // 要生成包的数量；[建议设置] 默认1
    packageCount.set(50)
    // 包名，可以与项目包名一致；[建议设置] 默认 cn.foxette.{随机}
    packageName.set("cn.foxette.android")
    // aar的模块名，与当前的模块名不同；默认 jmp{随机}
    moduleName.set("plugin")
    // 普通 class 数量，默认 activityClassesCount * 2
    blurClassesCount.set(20)

    // 默认jz_ 资源名称的前缀
    resPrefix.set("jz_")
    // aar的名称，默认 junk_code_{插件版本号}
    fileName.set("junk-1.1")
    // 检测到 app/junk 目录下为空时，自动生成；默认true
    autoGenerate.set(true)
    // 生成在strings.xml中的字符串数量；默认 activityClassesCount * 5
    stringsCount.set(100)
    // 生成 drawable 数量；默认 activityClassesCount * 2
    drawableCount.set(50)
    // 自动添加 releaseRuntimeOnly fileTree(dir : "junk", include : ["*.aar"]) 方式引入aar，如不需要可以设置成false
    autoUsage.set(true)
    // 是否忽略生成 drawable.xml string.xml; 默认false
    ignoreResource.set(false)
}
